#include <cstdlib>
#include<iostream>
#include<string>
#include<limits>
#include<sstream>
#include<numeric>
#include<ctime>
#include<cmath>
#include <vector>

#include "Shape.h"
#include "Circle.h"

using namespace std;

//Declare here the variables
int imGlobal = 0;   //Global variable
const double PI = 3.141;    //Variable who's value cannot change

//Declare here functions
double AddNumbers(double num1,double num2);
int AssignAge(int age);
void AssignAge3(int* pAge);

void DoubleArray(int *arr, int size);

void ShowArea(Shape& shape);

int main(int argc, char** argv) {
   
    /*Intro basic
     */
//    std::cout << "Hello World!" << endl; //how to print if I did not had "using namespace std;"  
//    cout << "Hello World using namespace std!" << endl;
//    
//    bool married = true;  //can also have false, 0 or 1
//    char myGrade = 'A';//Can store 256 characters
    
    /* There are many integer types with different min
    / and max values
    */
//    cout <<"\nInt types:" << endl;
//    cout << "Min unsigned short int " <<
//            numeric_limits<unsigned short int>::min()
//            << endl;
//    cout << "Max unsigned short int " <<
//            numeric_limits<unsigned short int>::max()
//            << endl;
//    cout << "Min short int " <<
//            numeric_limits<short int>::min()
//            << endl;
//    cout << "Max short int " <<
//            numeric_limits<short int>::max()
//            << endl;
//    cout << "Min int " <<
//            numeric_limits<int>::min()
//            << endl;
//    cout << "Max int " <<
//            numeric_limits<int>::max()
//            << endl;
//    cout << "Min long " <<
//            numeric_limits<long>::min()
//            << endl;
//    cout << "Max long " <<
//            numeric_limits<long>::max()
//            << endl;
    
    /* Floating type numbers have decimal places
    */
//    cout <<"\nFloating types:" << endl;
//    cout << "Min float " <<
//            numeric_limits<float>::min()
//            << endl;
//    cout << "Max float " <<
//            numeric_limits<float>::max()
//            << endl;
//    cout << "Min double " <<
//            numeric_limits<double>::min()
//            << endl;
//    cout << "Max double " <<
//            numeric_limits<double>::max()
//            << endl;
//    cout << "Min long double " <<
//            numeric_limits<long double>::min()
//            << endl;
//    cout << "Max long double " <<
//            numeric_limits<long double>::max()
//            << endl;
    
    /* Floating points accurate to 6 digits
    */
//    float f1 = 1.1111111;
//    float f2 = 1.1111111;   
//    printf("SUm = %.7f\n", (f1+f2));
      
    /* Doubles have 15 digits of precision
     * */
//    double d1 = 1.1111111111111111;
//    double d2 = 1.1111111111111111;
//    printf("Sum 2 = %.16f\n", (d1 + d2));
    
    /* You can have the compiler assign the type
     * */
//    auto whatAmI = true;
    
    /* Get the number of bytes assigned to a type
     * */
//    cout << "int Bytes : " << sizeof(int) << endl;
    
    /* More about printf()
    // char, int, 5 space right justified int,
    // 3 decimal float / double, string specifiers
     * */
//    printf("%c %d %5d %.3f %s\n", 'A', 10, 5, 3.1234, "Hi");
     
    /* Create a string, read from input, convert to int, do math operations
     * */   
//    string q1 = "Enter a Number : ";   
//    string num1, num2;  // Create strings to store values 
//    cout << q1;
//    cin >> num1;    // Receive user input and store it
//    cout << "Enter Another Number : ";
//    cin >> num2;
// 
//    // Convert strings into ints
//    int nNum1 = stoi(num1);
//    int nNum2 = stoi(num2);
//    
//    // Math Operators
//    printf("%d + %d = %d\n", nNum1, nNum2, (nNum1 + nNum2));
//    printf("%d - %d = %d\n", nNum1, nNum2, (nNum1 - nNum2));
//    printf("%d * %d = %d\n", nNum1, nNum2, (nNum1 * nNum2));
//    printf("%d / %d = %d\n", nNum1, nNum2, (nNum1 / nNum2));
//    printf("%d %% %d = %d\n", nNum1, nNum2, (nNum1 % nNum2));
    
    /*
     * // ---------- CONDITIONALS ----------
    // Conditional Operators : > < >= <= == !=
    // Logical Operators : && || !
     */  
//    string sAge;
//    cout << "Enter your Age : ";
//    cin >> sAge;
//    int nAge = stoi(sAge);
//    
//    // Used to output whether a birthday is important
//    if ((nAge >= 1) && (nAge <= 18)){
//        cout << "Important Birthday" << endl;
//    } else if ((nAge == 21) || (nAge == 50)){
//        cout << "Important Birthday" << endl;
//    } else if (nAge >= 65){
//        cout << "Important Birthday" << endl;
//    } else {
//        cout << "Not an Important Birthday" << endl;
//    }
    
    /*
     * // A ternary operator works like a compact if else
    // statement. If the condition is true the first
    // value is stored and otherwise the second*/
//    int age43 = 43;
//    bool canIVote = (age43 >= 18) ? true : false;
//    
//    cout.setf(ios::boolalpha);  // Shows bool values as true or false
//    cout << "Can Derek Vote : " << canIVote << endl;
    
    /* // ---------- ARRAYS ----------
    // An array is a collection of data of the same type
    // Declare an array of ints with the value of 1
    // Once the size is defined it can't change
      * */
//    int arrnNums[10] = {1};
//     
//    int arrnNums2[] = {1,2,3};  // Leave out the array length
//    
//    int arrnNums3[5] = {8, 9};  // Create an array and assign some values
//     
//    cout << "1st Value : " << arrnNums3[0] << endl; // Access array values using indexes starting with 0
//     
//    arrnNums3[0] = 7;   // Change a value
//    cout << "1st Value : " << arrnNums3[0] << endl;
//    
//    // A multidimensional array is like a spreadsheet
//    // If you think of each as layers that contain columns
//    // 1st Number : Which layer
//    // 2nd Number : Which column
//    // 3rd Number : Which row
//    int arrnNums4[2][2][2] = {{{1,2}, {3,4}}, {{5,6}, {7,8}}};
//    cout << arrnNums4[0][1][1] << endl;
//    
   
    /* // ---------- VECTORS ----------
     * #include <vector>
    // Vectors are used when you don't know how big the array
    // should be
     * */
//    vector<int> vNums(2);
//    vNums[0] = 1;
//    vNums[1] = 2;
//    vNums.push_back(3); // Add another to the end   
//    cout << "Vector Size : " << vNums.size() << endl;   // Get vector size
      
    /* // ---------- LOOPING ----------
 
    // While loops continue to run the code in them
    // as long as a condition is true
    // Create the variable used in the while condition
    // before the while loop
     * */
//    int i = 1;
// 
//    while (i <= 20){
//        if((i % 2) == 0){// If a value is even don't print it
//            i += 1;
//            continue;   // Continue skips the rest of the code  and jumps back to the beginning of the loop
//        }
//        // Break stops execution of the loop and jumps
//        // to the line after the loops closing }
//        if(i == 15) break;
//        cout << i << "\n";
//        // Increment i so the loop eventually ends
//        i += 1;
//    }
 
    /* Wow loop
    // A stringstream object receives strings separated
    // by a space and then spits them out 1 by 1
    */
//    vector<string> words;
//    stringstream ss("Some Random Words");
//    string word;
// 
//    while(getline(ss, word, ' ')){  // A while loop will execute as long as there are more words
//        words.push_back(word);
//    }
//    
//    for(int i = 0; i < words.size(); ++i){  // Cycle through each index in the vector using a for loop
//        cout << words[i] << endl;
//    }
// 
//    // An abbreviated for loop
//    int arr3[] = {1,2,3};
//    for(auto x: arr3) cout << x << endl;
    
    /*---------------------------------------
     */
    // Do while loops are guaranteed to execute at
    // least once
    // We'll create a secret number guessing game
    // We need to seed the random number generator time() returns the number of seconds
    // since 1, 1, 1970
    // Include <ctime>
//    srand(time(NULL));
//    int secretNum = rand() % 11; //biggest value will be 1-1=10, so it is between 0 and 10
//    int guess = 0;
//    do{
//        cout << "Guess the Number : ";
//        cin >> guess;
//        if(guess >secretNum) cout << "Too Big\n";
//        if(guess < secretNum) cout << "Too Small\n";
//    } while(secretNum != guess);  
//    cout <<"You guessed it" <<endl;

    /* ---------- STRINGS ----------
     * */
    // A C++ string is a series of characters that
    // can be changed
//    string str1 = "I'm a string";
//    cout << "1st : " << str1[0] << endl;    // Get the 1st character
//    cout << "Last : " << str1.back() << endl;    // Get the last character
//    cout << "Length : " << str1.length() << endl;    // Get the string length
//    string str2 = str1;    // Copy a string to another
//    string str3(str2,4);    // Copy a string after the 1st 4 characters
//    string str4 = str1 + " and you are not";    // Combine strings
//    str4.append("!");    // Append to the end of a string
//    str4.erase(12, str4.length() -1);   // Erase characters from a string from 1 index to another
//    cout << "New String " <<str4 << endl;   
//    
//    if(str4.find("string") !=string::npos)  // find() returns index where pattern is found or npos (End of String)
//        cout << "String Index : " << str4.find("string") << endl;
//   
//    cout << "Substring : " << str4.substr(6,6) << endl;   // substr(x, y) returns a substring starting at index x with a length of y
//    string strNum = to_string(1+2);
//    cout << "I'm a String : " << strNum << endl;
//    
//    // Character functions
//    char letterZ = 'z';
//    char num5 = '5';
//    char aSpace = ' ';
//    cout<< "Is z a letter or number " << 
//            isalnum(letterZ) << endl; //is letter or number
//    cout<< "Is z a letter " << 
//            isalpha(letterZ) << endl; //is letter or not
//    cout<< "Is 5 a number " << 
//            isdigit(num5) << endl; //is a number or not
//    cout << "Is space a space " <<
//            isspace(aSpace) << endl; //is a space or not
//    
    /* // ---------- MATH FUNCTIONS ----------
    // There are numerous math functions provided by
    // cmath en.cppreference.com/w/cpp/numeric/math
    */
//    cout << "abs(-10) = " << abs(-10) << endl;
//    cout << "max(5, 4) = " << max(5, 4) << endl;
//    cout << "min(5, 4) = " << min(5, 4) << endl;
//    cout << "fmax(5.3, 4.3) = " << fmax(5.3, 4.3) << endl;
//    cout << "fmin(5.3, 4.3) = " << fmin(5.3, 4.3) << endl;
//    cout << "ceil(10.45) = " << ceil(10.45) << endl;
//    cout << "floor(10.45) = " << floor(10.45) << endl;
//    cout << "round(10.45) = " << round(10.45) << endl;
//    cout << "pow(2,3) = " << pow(2,3) << endl;
//    cout << "sqrt(100) = " << sqrt(100) << endl;
//    cout << "cbrt(1000) = " << cbrt(1000) << endl;
// 
//    cout << "exp(1) = " << exp(1) << endl;  // e ^ x
//    cout << "exp2(1) = " << exp2(1) << endl;    // 2 ^ x
//    cout << "log(20.079) = " << log(20.079) << endl;    // e * e * e ~= 20 so log(20.079) ~= 3
//    cout << "log2(8) = " << log2(8) << endl;    // 2 * 2 * 2 = 8 
//    cout << "hypot(2,3) = " << hypot(2,3) << endl;  // Hypotenuse : SQRT(A^2 + B^2)
//    // Also sin, cos, tan, asin, acos, atan, atan2, sinh, cosh, tanh, asinh, acosh, atanh
    
    /* // ---------- FUNCTIONS ----------
    // You define function prototypes outside of main
    // so main knows a functions basic settings
    // Functions are also created outside of main
    // and can be found after main below
 
    // Call a function that sums values
     * */   
//    printf("%.1f + %.1f = %.1f\n", 5.0, 4.0, AddNumbers(5,4));
//    
//    int age2 = 43;//local variable
//    AssignAge3(&age2);    //send a reference opperator 
//    cout << age2;
    
    /* // ---------- POINTERS ----------
    // A Pointer stores a address in memory
    // You declare a pointer to be of the same type as the data
    // type to which it points
    // If you are storing the address of an int then the
    // pointer is an int
    // When you declare a pointer give it a null value
     */
//    int age2 = 43;
//    int * pAge2 = NULL; //when declaring a pointer is good to give it a null value
//    pAge2 = &age2;  //referance operator
//    cout << "Address : " << pAge2 << endl;  // Print the address Hexidecimal Number
//    cout << "Value : " <<*pAge2 << endl;    // Get the value at that address with the dereference operato
//    
//    int intArray[] = {1, 2, 3, 4};
//    int* pIntArray = intArray;
//    cout << "1st" <<pIntArray <<endl;
//    pIntArray++;
//    cout << "2nd" <<pIntArray <<endl;
//    
//    DoubleArray(intArray, 4);
//    for(int i=0; i<4; i++){ //print the array
//        cout << "Array " << intArray[i] << endl;
//    }
    
    /* // ---------- EXCEPTION HANDLING ----------
    // Exceptions are errors that occur when things don't
    // go as expected
    // You try to execute code that could be troublesome
    // and if an error occurs you catch it and throw
    // it t
     * o another block of code for handling
     */   
//    double num3 = 10, num4 = 0;
//    try{//code that could be problematic
//        if(num4 == 0){
//            throw "Division by Zero Error";
//        }else {
//            printf("%.1f / %.1f = %.1f", num3, num4, (num3 / num4));
//        }
//    }
//    catch(const char* exp){
//        cout << "Error : " << exp << endl;
//    }
    
    
    /*
     */
    
    Shape square(19,5);
    Circle circle(10);
    ShowArea(square);
    ShowArea(circle);
    
    return 0;
}

void ShowArea(Shape& shape){
    cout << "Area : " << shape.Area() << endl;
}



void DoubleArray(int *arr, int size){
    for(int i=0; i<size; ++i){
        arr[i] = arr[i] * 2;
    }
}

void AssignAge3(int* pAge){
    *pAge = 22;
}

int AssignAge(int age){
    age = 24;
    return age;
}

double AddNumbers(double num1 = 0,double num2 = 0){
    return num1 + num2;
}



